require_relative '../../../../../environments/rspec_env'


RSpec.describe 'Row, Integration' do

  let(:clazz) { CukeModeler::Row }
  let(:minimum_viable_gherkin) { '| single cell row |' }
  let(:maximum_viable_gherkin) { '| multiple | cell | row |' }
  let(:maximal_string_input) { maximum_viable_gherkin }


  describe 'common behavior' do

    it_should_behave_like 'a model, integration'
    it_should_behave_like 'a stringifiable model, integration'

  end


  describe 'unique behavior' do

    it 'can be instantiated with the minimum viable Gherkin' do
      expect { clazz.new(minimum_viable_gherkin) }.to_not raise_error
    end

    it 'can parse text that uses a non-default dialect' do
      original_dialect = CukeModeler::Parsing.dialect
      CukeModeler::Parsing.dialect = 'en-au'

      begin
        source_text = '| a | row |'

        expect { @model = clazz.new(source_text) }.to_not raise_error

        # Sanity check in case modeling failed in a non-explosive manner
        expect(@model.cells.last.value).to eq('row')
      ensure
        # Making sure that our changes don't escape a test and ruin the rest of the suite
        CukeModeler::Parsing.dialect = original_dialect
      end
    end

    it 'provides a descriptive filename when being parsed from stand alone text' do
      source = " |bad |row| text| \n @foo "

      expect { clazz.new(source) }.to raise_error(/'cuke_modeler_stand_alone_row\.feature'/)
    end

    describe 'parsing data' do

      context 'with minimum viable Gherkin' do

        let(:source_text) { minimum_viable_gherkin }

        it 'stores the original data generated by the parsing adapter', if: gherkin?((20..MOST_CURRENT_GHERKIN_VERSION)) do # rubocop:disable Layout/LineLength
          row = clazz.new(source_text)
          data = row.parsing_data

          expect(data).to be_a(Cucumber::Messages::TableRow)
          expect(data.location.line).to eq(5)
        end

        it 'stores the original data generated by the parsing adapter', if: gherkin?((9..19)) do
          row = clazz.new(source_text)
          data = row.parsing_data

          expect(data.keys).to match_array([:location, :cells, :id])
          expect(data[:location][:line]).to eq(5)
        end

      end

      context 'with maximum viable Gherkin' do

        let(:source_text) { maximum_viable_gherkin }

        it 'stores the original data generated by the parsing adapter', if: gherkin?((20..MOST_CURRENT_GHERKIN_VERSION)) do # rubocop:disable Layout/LineLength
          row = clazz.new(source_text)
          data = row.parsing_data

          expect(data).to be_a(Cucumber::Messages::TableRow)
          expect(data.location.line).to eq(5)
        end

        it 'stores the original data generated by the parsing adapter', if: gherkin?((9..19)) do
          row = clazz.new(source_text)
          data = row.parsing_data

          expect(data.keys).to match_array([:location, :cells, :id])
          expect(data[:location][:line]).to eq(5)
        end

      end

    end

    it 'properly sets its child models' do
      source = '| cell 1 | cell 2 |'

      row = clazz.new(source)
      cell_1 = row.cells.first
      cell_2 = row.cells.last

      expect(cell_1.parent_model).to equal(row)
      expect(cell_2.parent_model).to equal(row)
    end


    describe 'getting ancestors' do

      before(:each) do
        CukeModeler::FileHelper.create_feature_file(text: source_gherkin,
                                                    name: 'row_test_file',
                                                    directory: test_directory)
      end


      let(:test_directory) { CukeModeler::FileHelper.create_directory }
      let(:source_gherkin) {
        "#{FEATURE_KEYWORD}: Test feature

           #{SCENARIO_KEYWORD}: Test test
             #{STEP_KEYWORD} a step:
               | a | table |"
      }

      let(:directory_model) { CukeModeler::Directory.new(test_directory) }
      let(:row_model) { directory_model.feature_files.first.feature.tests.first.steps.first.block.rows.first }


      it 'can get its directory' do
        ancestor = row_model.get_ancestor(:directory)

        expect(ancestor).to equal(directory_model)
      end

      it 'can get its feature file' do
        ancestor = row_model.get_ancestor(:feature_file)

        expect(ancestor).to equal(directory_model.feature_files.first)
      end

      it 'can get its feature' do
        ancestor = row_model.get_ancestor(:feature)

        expect(ancestor).to equal(directory_model.feature_files.first.feature)
      end

      it 'can get its step' do
        ancestor = row_model.get_ancestor(:step)

        expect(ancestor).to equal(directory_model.feature_files.first.feature.tests.first.steps.first)
      end

      it 'can get its table' do
        ancestor = row_model.get_ancestor(:table)

        expect(ancestor).to equal(directory_model.feature_files.first.feature.tests.first.steps.first.block)
      end

      context 'a row that is part of a scenario' do

        let(:test_directory) { CukeModeler::FileHelper.create_directory }
        let(:source_gherkin) {
          "#{FEATURE_KEYWORD}: Test feature

             #{SCENARIO_KEYWORD}: Test test
               #{STEP_KEYWORD} a step:
                 | a | table |"
        }

        let(:directory_model) { CukeModeler::Directory.new(test_directory) }
        let(:row_model) { directory_model.feature_files.first.feature.tests.first.steps.first.block.rows.first }


        it 'can get its scenario' do
          ancestor = row_model.get_ancestor(:scenario)

          expect(ancestor).to equal(directory_model.feature_files.first.feature.tests.first)
        end

      end


      context 'a row that is part of a background' do

        let(:test_directory) { CukeModeler::FileHelper.create_directory }
        let(:source_gherkin) {
          "#{FEATURE_KEYWORD}: Test feature

             #{BACKGROUND_KEYWORD}: Test background
               #{STEP_KEYWORD} a step:
                 | a | table |"
        }

        let(:directory_model) { CukeModeler::Directory.new(test_directory) }
        let(:row_model) { directory_model.feature_files.first.feature.background.steps.first.block.rows.first }


        it 'can get its background' do
          ancestor = row_model.get_ancestor(:background)

          expect(ancestor).to equal(directory_model.feature_files.first.feature.background)
        end

      end

      context 'a row that is part of an outline' do

        let(:test_directory) { CukeModeler::FileHelper.create_directory }
        let(:source_gherkin) {
          "#{FEATURE_KEYWORD}: Test feature

             #{OUTLINE_KEYWORD}: Test outline
               #{STEP_KEYWORD} a step
             #{EXAMPLE_KEYWORD}:
               | param |
               | value |"
        }

        let(:directory_model) { CukeModeler::Directory.new(test_directory) }
        let(:row_model) { directory_model.feature_files.first.feature.tests.first.examples.first.rows.first }


        it 'can get its outline' do
          ancestor = row_model.get_ancestor(:outline)

          expect(ancestor).to equal(directory_model.feature_files.first.feature.tests.first)
        end

        it 'can get its example' do
          ancestor = row_model.get_ancestor(:example)

          expect(ancestor).to equal(directory_model.feature_files.first.feature.tests.first.examples.first)
        end

      end

      it 'returns nil if it does not have the requested type of ancestor' do
        ancestor = row_model.get_ancestor(:outline)

        expect(ancestor).to be_nil
      end

    end


    describe 'model population' do

      context 'from source text' do

        let(:source_text) { '| cell 1 | cell 2 |' }
        let(:row) { clazz.new(source_text) }


        it "models the row's cells" do
          cell_values = row.cells.map(&:value)

          expect(cell_values).to match_array(['cell 1', 'cell 2'])
        end

        it "models the row's source line" do
          source_text = <<~TEXT
            #{FEATURE_KEYWORD}: Test feature

               #{OUTLINE_KEYWORD}: Test outline
                 #{STEP_KEYWORD} a step
               #{EXAMPLE_KEYWORD}:
                 | param |
                 | value |
          TEXT
          row = CukeModeler::Feature.new(source_text).tests.first.examples.first.rows.first

          expect(row.source_line).to eq(6)
        end

        it "models the row's source column" do
          source_text = <<~TEXT
            #{FEATURE_KEYWORD}: Test feature

               #{OUTLINE_KEYWORD}: Test outline
                 #{STEP_KEYWORD} a step
               #{EXAMPLE_KEYWORD}:
                 | param |
                 | value |
          TEXT
          row = CukeModeler::Feature.new(source_text).tests.first.examples.first.rows.first

          expect(row.source_column).to eq(6)
        end

      end

    end


    describe 'row output' do

      describe 'inspection' do

        it 'can inspect a row that has a single cell' do
          source = '|value1|'
          row    = clazz.new(source)

          row_output = row.inspect

          expect(row_output).to eq('#<CukeModeler::Row:<object_id> @cells: ["value1"]>'
                                     .sub('<object_id>', row.object_id.to_s))
        end

        it 'can inspect a row that has multiple cells' do
          source = '|value1|value2|'
          row    = clazz.new(source)

          row_output = row.inspect

          expect(row_output).to eq('#<CukeModeler::Row:<object_id> @cells: ["value1", "value2"]>'
                                     .sub('<object_id>', row.object_id.to_s))
        end

      end


      describe 'stringification' do

        context 'from source text' do

          # TODO: Check other versions of Gherkin to see if cells potentially being nil is normal behavior. Update
          # row specs as needed.
          # Tentative specification. Not official API yet.
          it 'can stringify a minimal row' do
            skip('investigate further')
            source = ['||']
            source = source.join("\n")
            row    = CukeModeler::Row.new(source)

            row_output = row.to_s.split("\n", -1)

            expect(row_output).to eq(['|  |'])
          end

          # The minimal row case
          it 'can stringify a row with a single cell' do
            source = '| some value |'
            row    = clazz.new(source)

            expect(row.to_s).to eq('| some value |')
          end

          # The maximal row case
          it 'can stringify a row with multiple cells' do
            source = '| some value | some other value |'
            row    = clazz.new(source)

            expect(row.to_s).to eq('| some value | some other value |')
          end

        end


        context 'from abstract instantiation' do

          let(:row) { clazz.new }


          describe 'edge cases' do

            # These cases would not produce valid Gherkin and so don't have any useful output
            # but they need to at least not explode

            it 'can stringify a row that only has cells' do
              row.cells = [CukeModeler::Cell.new] # Note that the cell lacks a value

              expect { row.to_s }.to_not raise_error
            end

          end

        end

      end

    end

  end

end
